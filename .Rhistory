count
cursor
rows {
phase
status
urls {
name
url
}
disease {
id
name
}
drug {
id
name
mechanismsOfAction {
rows {
actionType
targets {
id
}
}
}
}
drugType
mechanismOfAction
}
}
}
}
"
# Set base URL of GraphQL API endpoint
base_url <- "https://api.platform.opentargets.org/api/v4/graphql"
# Set variables object of arguments to be passed to endpoint
variables <- list("ensgId" = gene_id)
# Construct POST request body object with query string and variables
post_body <- list(query = query_string, variables = variables)
# Perform POST request
r <- POST(url=base_url, body=post_body, encode='json')
df <- content(r)
str(df)
df <- content(r)$data
str(df)
names(df)
names(df$target)
names(df$target$knownDrugs)
names(df$target$knownDrugs$rows)
df$target$knownDrugs$rows
dd <- as.data.frame(df$target$knownDrugs$rows)
dd
df <- content(r)$data$target$knownDrugs$rows
str(df)
length(df)
df[[1]]
query_string = "
query KnownDrugsQuery(
$ensgId: String!
$cursor: String
$freeTextQuery: String
$size: Int = 20
) {
target(ensemblId: $ensgId) {
id
knownDrugs(cursor: $cursor, freeTextQuery: $freeTextQuery, size: $size) {
count
cursor
rows {
phase
status
urls {
name
url
}
disease {
id
name
}
drug {
id
name
mechanismsOfAction {
rows {
actionType
targets {
id
}
}
}
}
drugType
mechanismOfAction
}
}
}
}
"
# Set base URL of GraphQL API endpoint
base_url <- "https://api.platform.opentargets.org/api/v4/graphql"
# Set variables object of arguments to be passed to endpoint
variables <- list("ensgId" = gene_id)
# Construct POST request body object with query string and variables
post_body <- list(query = query_string, variables = variables)
# Perform POST request
r <- POST(url=base_url, body=post_body, encode='json')
df <- content(r)$data$target$knownDrugs$rows
df
df[[1]]
x
x <- df[[1]]
x
x$drug
know_drugs <- function(x) {
res <- data.table(Drug_name = x$drug$name,
Drug_id = x$drug$id,
Type = x$drugType,
mechanismOfAction = x$mechanismOfAction,
actionType = x$drug$mechanismsOfAction$rows[[1]]$actionType,
Disease_name = x$disease$name,
Disease_id = $disease$id,
Phase = x$phase,
Status = x$status,
Source = x$urls[[1]]$url
)
}
know_drugs <- function(x) {
res <- data.table(Drug_name = x$drug$name,
Drug_id = x$drug$id,
Type = x$drugType,
mechanismOfAction = x$mechanismOfAction,
actionType = x$drug$mechanismsOfAction$rows[[1]]$actionType,
Disease_name = x$disease$name,
Disease_id = $disease$id,
Phase = x$phase,
Status = x$status,
Source = x$urls[[1]]$url
)
res
}
know_drugs <- function(x) {
res <- data.table(Drug_name = x$drug$name,
Drug_id = x$drug$id,
Type = x$drugType,
mechanismOfAction = x$mechanismOfAction,
actionType = x$drug$mechanismsOfAction$rows[[1]]$actionType,
Disease_name = x$disease$name,
Disease_id = x$disease$id,
Phase = x$phase,
Status = x$status,
Source = x$urls[[1]]$url
)
res
}
df_res <- lapply(df, know_drugs)
df_res
df_res <- rbindlist(lapply(df, know_drugs))
df_res <- rbindlist(lapply(df, know_drugs), fill=TRUE)
df_res
View(df_res)
get_know_drugs <- function(gene_id = NULL) {
# Build query string to get general information about AR and genetic constraint and tractability assessments
query_string = "
query KnownDrugsQuery(
$ensgId: String!
$cursor: String
$freeTextQuery: String
$size: Int = 20
) {
target(ensemblId: $ensgId) {
id
knownDrugs(cursor: $cursor, freeTextQuery: $freeTextQuery, size: $size) {
count
cursor
rows {
phase
status
urls {
name
url
}
disease {
id
name
}
drug {
id
name
mechanismsOfAction {
rows {
actionType
targets {
id
}
}
}
}
drugType
mechanismOfAction
}
}
}
}
"
)
get_know_drugs <- function(gene_id = NULL) {
# Build query string to get general information about AR and genetic constraint and tractability assessments
query_string = "
query KnownDrugsQuery(
$ensgId: String!
$cursor: String
$freeTextQuery: String
$size: Int = 20
) {
target(ensemblId: $ensgId) {
id
knownDrugs(cursor: $cursor, freeTextQuery: $freeTextQuery, size: $size) {
count
cursor
rows {
phase
status
urls {
name
url
}
disease {
id
name
}
drug {
id
name
mechanismsOfAction {
rows {
actionType
targets {
id
}
}
}
}
drugType
mechanismOfAction
}
}
}
}
"
# Set base URL of GraphQL API endpoint
base_url <- "https://api.platform.opentargets.org/api/v4/graphql"
# Set variables object of arguments to be passed to endpoint
variables <- list("ensgId" = gene_id)
# Construct POST request body object with query string and variables
post_body <- list(query = query_string, variables = variables)
# Perform POST request
r <- POST(url=base_url, body=post_body, encode='json')
df <- content(r)$data$target$knownDrugs$rows
know_drugs <- function(x) {
res <- data.table(Drug_name = x$drug$name,
Drug_id = x$drug$id,
Type = x$drugType,
mechanismOfAction = x$mechanismOfAction,
actionType = x$drug$mechanismsOfAction$rows[[1]]$actionType,
Disease_name = x$disease$name,
Disease_id = x$disease$id,
Phase = x$phase,
Status = x$status,
Source = x$urls[[1]]$url
)
res
}
df_res <- rbindlist(lapply(df, know_drugs), fill=TRUE)
df_res
}
df <- get_know_drugs(gene_id = "ENSG00000165029")
View(df)
# Install the package if you have not installed by running this command:
BiocManager::install("EnsDb.Hsapiens.v79")
library(EnsDb.Hsapiens.v79)
install.packages("S4Vectors")
install.packages("S4Vectors")
BiocManager::install("S4Vectors")
BiocManager::install("S4Vectors", force = TRUE)
# Install the package if you have not installed by running this command:
BiocManager::install("EnsDb.Hsapiens.v79")
library(EnsDb.Hsapiens.v79)
library(S4Vectors)
q()
library(EnsDb.Hsapiens.v79)
# 1. Convert from ensembl.gene to gene.symbol
ensembl.genes <- c("ENSG00000150676", "ENSG00000099308", "ENSG00000142676", "ENSG00000180776", "ENSG00000108848", "ENSG00000277370", "ENSG00000103811", "ENSG00000101473")
geneIDs1 <- ensembldb::select(EnsDb.Hsapiens.v79, keys= ensembl.genes, keytype = "GENEID", columns = c("SYMBOL","GENEID"))
# 2. Convert from gene.symbol to ensembl.gene
geneSymbols <-  c('DDX26B','CCDC83',  'MAST3', 'RPL11', 'ZDHHC20',  'LUC7L3',  'SNORD49A',  'CTSH', 'ACOT8')
geneIDs2 <- ensembldb::select(EnsDb.Hsapiens.v79, keys= geneSymbols, keytype = "SYMBOL", columns = c("SYMBOL","GENEID"))
geneIDs1
geneIDs2
ensembldb::genes()
ensembldb::genes
query_string ='
query useSearchToConvertRSIDIntoIDFormat {
search(queryString:"rs6335"){
totalVariants
variants{
id
}
}
}
'
base_url <- "https://api.platform.opentargets.org/api/v4/graphql"
# Set variables object of arguments to be passed to endpoint
variables <- list("ensgId" = gene_id)
# Construct POST request body object with query string and variables
post_body <- list(query = query_string)
# Perform POST request
r <- POST(url=base_url, body=post_body, encode='json')
# Install relevant library for HTTP requests
library(httr)
# Construct POST request body object with query string and variables
post_body <- list(query = query_string)
# Perform POST request
r <- POST(url=base_url, body=post_body, encode='json')
r
content(r)
# 2. Convert from gene.symbol to ensembl.gene
geneSymbols <-  c('FOXF1')
geneIDs2 <- ensembldb::select(EnsDb.Hsapiens.v79, keys= geneSymbols, keytype = "SYMBOL", columns = c("SYMBOL","GENEID"))
geneIDs2
# 2. Convert from gene.symbol to ensembl.gene
geneSymbols <-  c('ENG')
geneIDs2 <- ensembldb::select(EnsDb.Hsapiens.v79, keys= geneSymbols, keytype = "SYMBOL", columns = c("SYMBOL","GENEID"))
geneIDs2
15229+177473+11239+137621+1415+18632
68240+18304+25180
103914+18421+31269
15229+177473+11239+137621+1415+18632+68240+18304+25180+68240+18304+25180
68240+18304+25180+103914+18421+31269
15229+11239+1415
177473+137621+18632
15229+11239+1415+1358
177473+137621+18632+16455
68240+18304+25180
103914+18421+31269
df <- fread("https://platform.opentargets.org/target/ENSG00000165029")
library(data.table)
df <- fread("https://platform.opentargets.org/target/ENSG00000165029")
# Install relevant library for HTTP requests
library(httr)
# Set gene_id variable for AR (androgen receptor)
gene_id <- "ENSG00000165029"
get_know_drugs <- function(gene_id = NULL) {
# Build query string to get general information about AR and genetic constraint and tractability assessments
query_string = "
query KnownDrugsQuery(
$ensgId: String!
$cursor: String
$freeTextQuery: String
$size: Int = 20
) {
target(ensemblId: $ensgId) {
id
knownDrugs(cursor: $cursor, freeTextQuery: $freeTextQuery, size: $size) {
count
cursor
rows {
phase
status
urls {
name
url
}
disease {
id
name
}
drug {
id
name
mechanismsOfAction {
rows {
actionType
targets {
id
}
}
}
}
drugType
mechanismOfAction
}
}
}
}
"
# Set base URL of GraphQL API endpoint
base_url <- "https://api.platform.opentargets.org/api/v4/graphql"
# Set variables object of arguments to be passed to endpoint
variables <- list("ensgId" = gene_id)
# Construct POST request body object with query string and variables
post_body <- list(query = query_string, variables = variables)
# Perform POST request
r <- POST(url=base_url, body=post_body, encode='json')
df <- content(r)$data$target$knownDrugs$rows
know_drugs <- function(x) {
res <- data.table(Drug_name = x$drug$name,
Drug_id = x$drug$id,
Type = x$drugType,
mechanismOfAction = x$mechanismOfAction,
actionType = x$drug$mechanismsOfAction$rows[[1]]$actionType,
Disease_name = x$disease$name,
Disease_id = x$disease$id,
Phase = x$phase,
Status = x$status,
Source = x$urls[[1]]$url
)
res
}
df_res <- rbindlist(lapply(df, know_drugs), fill=TRUE)
df_res
}
df <- get_know_drugs(gene_id = "ENSG00000165029")
df_gene <- readxl::read_excel("~/Downloads/Tables.xlsx", sheet = 7)
df_gene
df_gene <- readxl::read_excel("~/Downloads/Tables.xlsx", sheet = 7, skip = 1)
df_gene
setDT(df_gene)
View(df_gene)
df_s <- df_gene[CHR == 1]
df_s $gene
df_res <- NULL
df_res <- NULL
for( i in df_s$gene) {
df_one <- get_know_drugs(gene_id = i)
df_res <- rbind(df_res, df_one)
}
View(df_res)
df_one <- cbind(gene = i, df_one)
df_one
df_one <- data.table(gene = i, df_one)
df_one
df_one <- get_know_drugs(gene_id = i)
df_one <- data.table(gene = i, df_one)
df_one
df_res <- NULL
for( i in df_s$gene) {
df_one <- get_know_drugs(gene_id = i)
df_one <- data.table(gene = i, df_one)
df_res <- rbind(df_res, df_one, fill = TRUE)
}
View(df_res)
df_res <- df_res[!is.na(gene)]
View(df_res)
df_res <- df_res[!is.na(Drug_name)]
View(df_res)
View(df_res)
df <- mtcars
df
fit <- lm(mpg ~ disp, data = df)
summary(fit)
fit <- lm(mpg ~ scale(disp), data = df)
summary(fit)
df$group <- quantile(df$disp)
quantile(df$disp)
df$group <- cutdf$disp, quantile(df$disp))
df$group <- cut(df$disp, quantile(df$disp))
table(df$group)
df$group <- factor(df$group)
str(df)
fit <- lm(mpg ~ group, data = df)
summary(fit)
fit <- lm(mpg ~ group, data = df)
df$group <- as.ordered(df$group)
fit <- lm(mpg ~ group, data = df)
summary(fit)
as.integer(df$group)
df$group <- as.integer(df$group)
fit <- lm(mpg ~ group, data = df)
summary(fit)
fit <- lm(mpg ~ scale(disp), data = df)
summary(fit)
q()
setwd("/Users/xih628/Documents/project/pkg/TippingPoint-master/")
devtools::check()
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::document()
devtools::install()
devtools::build()
setwd("/Users/xih628/Documents/project/pkg/TippingPoint/")
devtools::check()
Version 1.1.0
-----------------------------------------------------------------------------------------------------
* A function created based on Rcpp is not essential currently, so we plan to remove it to make it more convenient for users to install the pkg without compilation.
devtools::document()
devtools::install()
devtools::install()
devtools::install(build_vignettes = TRUE
)
library(TippingPoint)
devtools::release()
devtools::release()
devtools::build()
check_rhub()
devtools::check_rhub()
library(bayesSurv)
devtools::document()
devtools::install(build_vignettes = TRUE)
devtools::check()
devtools::check()
devtools::build()
